set use_sort_nest=1;
CREATE TABLE t1 (a int, b int, c int, KEY(a), key(b))engine=MYISAM;
insert into t1 values (1,9,1), (1,8,2), (1,9,3), (1,10,4), (1,11,5), (1,12,6);
insert into t1 values (1,4,7), (1,8,8), (1,11,9), (1,10,10), (1,11,11), (1,13,12);
insert into t1 values (1,2,6), (1,7,14), (1,9,15), (1,10,16), (1,11,17), (1,14,18);
insert into t1 values (1,6,19), (1,5,20);
create table t2 (a int, b int, key(b))ENGINE=MYISAM;
insert into t2 values (0,1), (0,2), (0,3), (0,4), (0,5), (0,6);
insert into t2 values (1,7), (1,8), (1,9), (1,10), (1,11), (1,12);
insert into t2 values (1,7), (1,8), (1,9), (1,10), (1,11), (1,13);
# join order picked should be t1,t2 for both the cases
# selectivity for the where clause is 100%, so we just need to read 2 records
# from table and then we get the output
# Access methods considered should be ref access bby index(a), table_scan
# and an index_scan(b) [this satisfied the ordering]
explain
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	a	b	5	NULL	1	Using where
1	SIMPLE	t2	ref	b	b	5	test.t1.c	2	
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b limit 2;
a	b	c	a	b
1	2	6	0	6
1	4	7	1	7
# same as above but the ordering for index is reversed
explain
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b desc limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	a	b	5	NULL	1	Using where
1	SIMPLE	t2	ref	b	b	5	test.t1.c	2	
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b desc limit 2;
a	b	c	a	b
1	13	12	1	12
1	12	6	0	6
drop table t1,t2;
CREATE TABLE t1 (a int, b int, c int, KEY a_b (a,b), KEY a_c (a,c));
insert into t1 values (0,1,0), (0,2,0), (0,3,0), (0,4,0), (0,5,0), (0,6,0);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,1), (1,11,1), (1,12,1);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
#
# ref access on key a_b, no need for filesort
# rows should be 8
#
explain select a,b,c from t1 where a=1 and c=2 order by b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ref	a_b,a_c	a_b	5	const	8	Using where
select a,b,c from t1 where a=1 and c=2 order by b limit 5;
a	b	c
1	7	2
1	7	2
1	8	2
1	8	2
1	9	2
#
# this needs to be fixed, desc is not taken into consideration
#
explain select a,b,c from t1 where a=1 and c=2 order by b desc limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ref	a_b,a_c	a_b	5	const	8	Using where
select a,b,c from t1 where a=1 and c=2 order by b desc limit 5;
a	b	c
1	7	2
1	7	2
1	8	2
1	8	2
1	9	2
drop table t1;
CREATE TABLE t1 (a int, b int, c int, KEY (a), KEY (b));
insert into t1 values (0,1,0), (0,2,0), (0,3,0), (0,4,0), (0,5,0), (0,6,0);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,1), (1,11,2), (1,12,1);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,1,1);
#
# range access on key(a) should be used here
#
explain select a,b,c from t1 where a >= 1 and b > 8 order by a limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	a,b	a	5	NULL	19	Using index condition; Using where
select a,b,c from t1 where a >= 1 and b > 8 order by a limit 2;
a	b	c
1	9	1
1	10	1
explain select a,b,c from t1 where a >= 1 and b > 8 order by a desc limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	a,b	a	5	NULL	19	Using index condition; Using where
select a,b,c from t1 where a >= 1 and b > 8 order by a desc limit 2;
a	b	c
1	12	2
1	11	2
drop table t1;
