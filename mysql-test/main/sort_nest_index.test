set use_sort_nest=1;
CREATE TABLE t1 (a int, b int, c int, KEY(a), key(b))engine=MYISAM;

insert into t1 values (1,9,1), (1,8,2), (1,9,3), (1,10,4), (1,11,5), (1,12,6);
insert into t1 values (1,4,7), (1,8,8), (1,11,9), (1,10,10), (1,11,11), (1,13,12);
insert into t1 values (1,2,6), (1,7,14), (1,9,15), (1,10,16), (1,11,17), (1,14,18);
insert into t1 values (1,6,19), (1,5,20);

create table t2 (a int, b int, key(b))ENGINE=MYISAM;
insert into t2 values (0,1), (0,2), (0,3), (0,4), (0,5), (0,6);
insert into t2 values (1,7), (1,8), (1,9), (1,10), (1,11), (1,12);
insert into t2 values (1,7), (1,8), (1,9), (1,10), (1,11), (1,13);

--echo # join order picked should be t1,t2 for both the cases
--echo # selectivity for the where clause is 100%, so we just need to read 2 records
--echo # from table and then we get the output
--echo # Access methods considered should be ref access bby index(a), table_scan
--echo # and an index_scan(b) [this satisfied the ordering]

explain
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b limit 2;
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b limit 2;

--echo # same as above but the ordering for index is reversed
explain
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b desc limit 2;
select t1.a,t1.b,t1.c,t2.a,t2.b from t1, t2 where t1.a=1 and t1.c=t2.b order by t1.b desc limit 2;

drop table t1,t2;
