set use_sort_nest=1;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int);
insert into t1 select a,a from t0 where a <5;
create table t2 as select * from t1 where a < 5;
create table t3(a int, b int, c int);
insert into t3 select A.a + 10*B.a, A.a + 10*B.a, A.a + 10*B.a from t0 A, t0 B;
alter table t3 add key(a);
#
# sort-nest(t2,t1)
# ref(sort-nest.b) access on table t3
#
EXPLAIN SELECT t1.a, t2.b, t1.b, t3.a from t1,t2,t3
WHERE t1.a=t2.a and t2.b=t3.a
ORDER BY t2.b desc, t1.b desc
LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	5	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	5	Using where; Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	5	Using filesort
1	SIMPLE	t3	ref	a	a	5	sort-nest.b	1	Using index
EXPLAIN FORMAT=JSON SELECT t1.a, t2.b, t1.b, t3.a from t1,t2,t3
WHERE t1.a=t2.a and t2.b=t3.a
ORDER BY t2.b desc, t1.b desc
LIMIT 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 5,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 5,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL",
      "attached_condition": "t2.a = t1.a"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.b desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 5,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ref",
      "possible_keys": ["a"],
      "key": "a",
      "key_length": "5",
      "used_key_parts": ["a"],
      "ref": ["sort-nest.b"],
      "rows": 1,
      "filtered": 100,
      "using_index": true
    }
  }
}
SELECT t1.a, t2.b, t1.b, t3.a from t1,t2,t3
WHERE t1.a=t2.a and t2.b=t3.a
ORDER BY t2.b desc, t1.b desc
LIMIT 5;
a	b	b	a
4	4	4	4
3	3	3	3
2	2	2	2
1	1	1	1
0	0	0	0
alter table t3 drop key a;
drop table t0,t1,t2,t3;
create table ten(a int);
insert into ten values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table one_k(a int);
insert into one_k select A.a + B.a* 10 + C.a * 100 from ten A, ten B, ten C;
create table t1(a int, b int);
insert into t1 select A.a + B.a* 10, A.a + B.a* 10 from ten A, ten B;
create table t2(a int, b int);
insert into t2(a,b) values (1,1), (2,2);
insert into t2 select A.a + B.a* 10, A.a+B.a*10 from ten A, ten B;
create table t3(a int, b int);
insert into t3 select A.a + B.a* 10 + C.a * 100, A.a + B.a* 10 + C.a * 100 from ten A, ten B, ten C;
create function f1(a int) returns int
begin
declare b int default 0;
return a+b;
end|
Covering 3 table joins

# {t1,t2} part of the nest
# t1.a > 95 would be attached to table t1
# t1.b=t2.a would be attached to table t2;
# t3.a= sort-nest.b would be attached to table t3

alter table t2 add key(a);
explain select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a order by t2.b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	Using where
1	SIMPLE	t2	ref	a	a	5	test.t1.a	1	
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a order by t2.b limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100,
      "attached_condition": "t1.a > 95 and t1.a is not null"
    },
    "table": {
      "table_name": "t2",
      "access_type": "ref",
      "possible_keys": ["a"],
      "key": "a",
      "key_length": "5",
      "used_key_parts": ["a"],
      "ref": ["test.t1.a"],
      "rows": 1,
      "filtered": 100
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a = `sort-nest`.b"
    }
  }
}
select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a order by t2.b limit 5;
a	b	a	b	a	b
96	96	96	96	96	96
97	97	97	97	97	97
98	98	98	98	98	98
99	99	99	99	99	99
alter table t2 drop key a;

# {t1,t2} part of the sort nest
# (t2.a < 2 or t1.b > 98) would be attached to table t2

explain select * from t1,t2,t3 where (t3.a < 2 and t2.a < 2) or (t1.b > 98 and t3.b > 98)
order by t1.a, t2.b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using where; Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select * from t1,t2,t3 where (t3.a < 2 and t2.a < 2) or (t1.b > 98 and t3.b > 98)
order by t1.a, t2.b limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL",
      "attached_condition": "t2.a < 2 or t1.b > 98"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a, `sort-nest`.b",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a < 2 and `sort-nest`.a < 2 or `sort-nest`.b > 98 and t3.b > 98"
    }
  }
}
select * from t1,t2,t3 where (t3.a < 2 and t2.a < 2) or (t1.b > 98 and t3.b > 98)
order by t1.a, t2.b limit 5;
a	b	a	b	a	b
0	0	1	1	0	0
0	0	1	1	1	1
1	1	1	1	0	0
1	1	1	1	1	1
2	2	1	1	0	0

# {t1,t2} part of the nest
# t2.a < 2 or f1(t1.b) attached to table t2
# t1.b=t2.a would be attached to table t2;

explain select * from t1,t2,t3 where (t3.a<2  and t2.a <2) or (f1(t1.b) > 98 and t3.b > 98)
order by t1.a,t2.b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select * from t1,t2,t3 where (t3.a<2  and t2.a <2) or (f1(t1.b) > 98 and t3.b > 98)
order by t1.a,t2.b limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a, `sort-nest`.b",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a < 2 and `sort-nest`.a < 2 or f1(`sort-nest`.b) > 98 and t3.b > 98"
    }
  }
}
select * from t1,t2,t3 where (t3.a<2  and t2.a <2) or (f1(t1.b) > 98 and t3.b > 98)
order by t1.a,t2.b limit 5;
a	b	a	b	a	b
0	0	0	0	0	0
0	0	0	0	1	1
0	0	1	1	0	0
0	0	1	1	1	1
0	0	1	1	0	0
#
# Removing constant from the order by clause
#
explain select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by t2.a limit 4;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	Using where; Using filesort
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using where
explain format=json select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by t2.a limit 4;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "read_sorted_file": {
      "filesort": {
        "sort_key": "t2.a",
        "table": {
          "table_name": "t1",
          "access_type": "ALL",
          "rows": 100,
          "filtered": 100,
          "attached_condition": "t1.a > 95"
        }
      }
    },
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 102,
      "filtered": 100,
      "attached_condition": "t2.a = t1.a"
    }
  }
}
select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by t2.a limit 4;
a	b	a	b
96	96	96	96
97	97	97	97
98	98	98	98
99	99	99	99
explain select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by 1+2,t2.a limit 4;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	Using where; Using filesort
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using where
explain format=json select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by 1+2,t2.a limit 4;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "read_sorted_file": {
      "filesort": {
        "sort_key": "t2.a",
        "table": {
          "table_name": "t1",
          "access_type": "ALL",
          "rows": 100,
          "filtered": 100,
          "attached_condition": "t1.a > 95"
        }
      }
    },
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 102,
      "filtered": 100,
      "attached_condition": "t2.a = t1.a"
    }
  }
}
select * from t1,t2 where t1.a > 95  and t1.a=t2.a order by 1+2,t2.a limit 4;
a	b	a	b
96	96	96	96
97	97	97	97
98	98	98	98
99	99	99	99
#
# Equality propagation, both the queries should use a sort nest on {t1,t2}
#
explain select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t1.b desc, t2.a desc limit 3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t1.b desc, t2.a desc limit 3;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.b = `sort-nest`.b"
    }
  }
}
select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t1.b desc, t2.a desc limit 3;
b	a	b	a
99	99	99	99
99	98	99	99
99	97	99	99
explain select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b desc, t2.a desc limit 3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
select * from INFORMATION_SCHEMA.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
explain format=json select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b desc, t2.a desc limit 3;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.b = `sort-nest`.b"
    }
  }
}
select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b desc, t2.a desc limit 3;
b	a	b	a
99	99	99	99
99	98	99	99
99	97	99	99
#
# Equality propagation also for arguments of expressions, 
# the plan should use a sort nest on {t1,t2}
#
explain select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b+1 desc, t2.a desc limit 3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b+1 desc, t2.a desc limit 3;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b + 1 desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.b = `sort-nest`.b"
    }
  }
}
select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.b=t3.b
order by t3.b+1 desc, t2.a desc limit 3;
b	a	b	a
99	99	99	99
99	98	99	99
99	97	99	99
#
# Rows for the sort-nest should be the cardinality of the join of inner tables
# of the sort-nest
#
# Rows for sort nest would be 9894 here
alter table t1 add key(a);
explain extended select t3.b, t2.a , t1.b , t1.a  from t1,t2,t3 where t1.a > 5 and t1.b=t3.b
order by t1.b desc, t2.a desc limit 3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	a	NULL	NULL	NULL	100	97.00	Using where
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	100.00	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	100.00	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	100.00	Using where
Warnings:
Note	1003	select `test`.`t3`.`b` AS `b`,`sort-nest`.`a` AS `a`,`sort-nest`.`b` AS `b`,`sort-nest`.`a` AS `a` from `test`.`t1` join `test`.`t2` join `test`.`t3` where `test`.`t3`.`b` = `sort-nest`.`b` order by `sort-nest`.`b` desc,`sort-nest`.`a` desc limit 3
alter table t1 drop key a;
#
# With having clause we can't have a sort-nest
#
explain select * from t1,t2,t3 where t1.a=t2.a and t1.b = t3.a  having t1.a > 95
order by t2.b,t1.b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	Using temporary; Using filesort
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using where; Using join buffer (flat, BNL join)
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where; Using join buffer (incremental, BNL join)
explain format=json select * from t1,t2,t3 where t1.a=t2.a and t1.b = t3.a  having t1.a > 95
order by t2.b,t1.b limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "having_condition": "t1.a > 95",
    "filesort": {
      "sort_key": "t2.b, t1.b",
      "temporary_table": {
        "table": {
          "table_name": "t1",
          "access_type": "ALL",
          "rows": 100,
          "filtered": 100
        },
        "block-nl-join": {
          "table": {
            "table_name": "t2",
            "access_type": "ALL",
            "rows": 102,
            "filtered": 100
          },
          "buffer_type": "flat",
          "buffer_size": "1Kb",
          "join_type": "BNL",
          "attached_condition": "t2.a = t1.a"
        },
        "block-nl-join": {
          "table": {
            "table_name": "t3",
            "access_type": "ALL",
            "rows": 1000,
            "filtered": 100
          },
          "buffer_type": "incremental",
          "buffer_size": "149Kb",
          "join_type": "BNL",
          "attached_condition": "t3.a = t1.b"
        }
      }
    }
  }
}
select * from t1,t2,t3 where t1.a=t2.a and t1.b = t3.a  having t1.a > 95
order by t2.b,t1.b limit 5;
a	b	a	b	a	b
96	96	96	96	96	96
97	97	97	97	97	97
98	98	98	98	98	98
99	99	99	99	99	99
explain select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a
order by t2.b,t1.b limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	100	Using where
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	102	Using where; Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a
order by t2.b,t1.b limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 100,
      "filtered": 100,
      "attached_condition": "t1.a > 95"
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 102,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "1Kb",
      "join_type": "BNL",
      "attached_condition": "t2.a = t1.a"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b, `sort-nest`.b",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a = `sort-nest`.b"
    }
  }
}
select * from t1,t2,t3 where t1.a > 95 and  t1.a=t2.a and t1.b = t3.a
order by t2.b,t1.b limit 5;
a	b	a	b	a	b
96	96	96	96	96	96
97	97	97	97	97	97
98	98	98	98	98	98
99	99	99	99	99	99
#
# Selectivity estimates taken into account for sort-nest{t1,t2}
#
create index idx1 on t1(b);
create index idx2 on t2(a);
create index idx3 on t3(b);
explain select * from t1,t2,t3
where t1.a=t2.a and t1.b = t3.a and t1.b < 5 and t3.b < 500
order by t2.b limit 50;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	idx1	idx1	5	NULL	3	Using index condition; Using where
1	SIMPLE	t2	ref	idx2	idx2	5	test.t1.a	1	
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	idx3	NULL	NULL	NULL	1000	Using where
explain format=json select * from t1,t2,t3
where t1.a=t2.a and t1.b = t3.a and t1.b < 5 and t3.b < 500
order by t2.b limit 50;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "range",
      "possible_keys": ["idx1"],
      "key": "idx1",
      "key_length": "5",
      "used_key_parts": ["b"],
      "rows": 3,
      "filtered": 100,
      "index_condition": "t1.b < 5",
      "attached_condition": "t1.a is not null"
    },
    "table": {
      "table_name": "t2",
      "access_type": "ref",
      "possible_keys": ["idx2"],
      "key": "idx2",
      "key_length": "5",
      "used_key_parts": ["a"],
      "ref": ["test.t1.a"],
      "rows": 1,
      "filtered": 100
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "possible_keys": ["idx3"],
      "rows": 1000,
      "filtered": 49.4,
      "attached_condition": "t3.a = `sort-nest`.b and t3.b < 500"
    }
  }
}
select * from t1,t2,t3
where t1.a=t2.a and t1.b = t3.a and t1.b < 5 and t3.b < 500
order by t2.b limit 50;
a	b	a	b	a	b
0	0	0	0	0	0
1	1	1	1	1	1
1	1	1	1	1	1
2	2	2	2	2	2
2	2	2	2	2	2
3	3	3	3	3	3
4	4	4	4	4	4
drop index idx1 on t1;
drop index idx2 on t2;
drop index idx3 on t3;
drop table t1,t2,t3,ten,one_k;
drop function f1;
Derived table inside a sort-nest
CREATE TABLE t1 (f1 varchar(1), f2 varchar(1), KEY (f2));
INSERT INTO t1 VALUES
('r','x'), ('x','x'), ('x','x'), ('r','x'), ('x','x');
CREATE TABLE t2 (f1 varchar(1), f2 varchar(1));
INSERT INTO t2 VALUES ('s','x');
CREATE TABLE t3 (f1 varchar(1), f2 varchar(1), KEY (f2));
INSERT INTO t3 VALUES
(NULL,'x'), (NULL,'f'), ('t','x'), (NULL,'j'), ('g','x');
CREATE TABLE t4 (f1 int, f2 varchar(1), KEY (f2,f1)) ;
INSERT INTO t4 VALUES (2,'x'), (1,'x');
explain SELECT t.f1 as f
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f limit 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t4	index	f2	f2	9	NULL	2	Using where; Using index
1	PRIMARY	<derived2>	ref	key1	key1	4	test.t4.f2	2	
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	4	Using filesort
1	PRIMARY	t3	ref	f2	f2	4	sort-nest.f2	2	Using index
2	DERIVED	t2	system	NULL	NULL	NULL	NULL	1	Using temporary
2	DERIVED	t1	ALL	f2	NULL	NULL	NULL	5	Using where
explain format=json SELECT t.f1 as f
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f limit 10;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t4",
      "access_type": "index",
      "possible_keys": ["f2"],
      "key": "f2",
      "key_length": "9",
      "used_key_parts": ["f2", "f1"],
      "rows": 2,
      "filtered": 100,
      "attached_condition": "t4.f2 is not null",
      "using_index": true
    },
    "table": {
      "table_name": "<derived2>",
      "access_type": "ref",
      "possible_keys": ["key1"],
      "key": "key1",
      "key_length": "4",
      "used_key_parts": ["f1"],
      "ref": ["test.t4.f2"],
      "rows": 2,
      "filtered": 100,
      "materialized": {
        "query_block": {
          "select_id": 2,
          "temporary_table": {
            "table": {
              "table_name": "t2",
              "access_type": "system",
              "rows": 1,
              "filtered": 100
            },
            "table": {
              "table_name": "t1",
              "access_type": "ALL",
              "possible_keys": ["f2"],
              "rows": 5,
              "filtered": 100,
              "attached_condition": "t1.f2 = 'x'"
            }
          }
        }
      }
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.f1",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 4,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ref",
      "possible_keys": ["f2"],
      "key": "f2",
      "key_length": "4",
      "used_key_parts": ["f2"],
      "ref": ["sort-nest.f2"],
      "rows": 2,
      "filtered": 100,
      "using_index": true
    }
  }
}
SELECT t.f1 as f
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f limit 10;
f
x
x
x
x
x
x
should use the sort-nest too like the query above
explain SELECT t4.f1 as f, t.f1 as g
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f,g limit 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t4	index	f2	f2	9	NULL	2	Using where; Using index
1	PRIMARY	<derived2>	ref	key1	key1	4	test.t4.f2	2	
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	4	Using filesort
1	PRIMARY	t3	ref	f2	f2	4	sort-nest.f2	2	Using index
2	DERIVED	t2	system	NULL	NULL	NULL	NULL	1	Using temporary
2	DERIVED	t1	ALL	f2	NULL	NULL	NULL	5	Using where
explain format=json SELECT t4.f1 as f, t.f1 as g
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f,g limit 10;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t4",
      "access_type": "index",
      "possible_keys": ["f2"],
      "key": "f2",
      "key_length": "9",
      "used_key_parts": ["f2", "f1"],
      "rows": 2,
      "filtered": 100,
      "attached_condition": "t4.f2 is not null",
      "using_index": true
    },
    "table": {
      "table_name": "<derived2>",
      "access_type": "ref",
      "possible_keys": ["key1"],
      "key": "key1",
      "key_length": "4",
      "used_key_parts": ["f1"],
      "ref": ["test.t4.f2"],
      "rows": 2,
      "filtered": 100,
      "materialized": {
        "query_block": {
          "select_id": 2,
          "temporary_table": {
            "table": {
              "table_name": "t2",
              "access_type": "system",
              "rows": 1,
              "filtered": 100
            },
            "table": {
              "table_name": "t1",
              "access_type": "ALL",
              "possible_keys": ["f2"],
              "rows": 5,
              "filtered": 100,
              "attached_condition": "t1.f2 = 'x'"
            }
          }
        }
      }
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.f1, `sort-nest`.f1",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 4,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ref",
      "possible_keys": ["f2"],
      "key": "f2",
      "key_length": "4",
      "used_key_parts": ["f2"],
      "ref": ["sort-nest.f2"],
      "rows": 2,
      "filtered": 100,
      "using_index": true
    }
  }
}
SELECT t4.f1 as f, t.f1 as g
FROM (SELECT DISTINCT t1.* FROM t1,t2 WHERE t2.f2 = t1.f2) t,t3,t4
WHERE t4.f2 = t3.f2  AND t4.f2 = t.f1 ORDER BY f,g limit 10;
f	g
1	x
1	x
1	x
2	x
2	x
2	x
drop table t1,t2,t3,t4;
views inside a sort-nest
create table t0 (x int);
create table t1 (a int);
create table t2 (b int, c int default 0);
insert t0 (x) values (0),(10);
insert t1 (a) values (1), (2);
insert t2 (b) values (1), (2);
create view v1 as select t2.b,t2.c from t1, t2
where t1.a=t2.b and t2.b < 3 with check option;
explain select * from v1,t0 where b<3 order by x,b desc limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	Using where
1	SIMPLE	t0	ALL	NULL	NULL	NULL	NULL	2	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	2	Using where
explain format=json select * from v1,t0 where b<3 order by x,b desc limit 2;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 2,
      "filtered": 100,
      "attached_condition": "t1.a < 3 and t1.a < 3"
    },
    "block-nl-join": {
      "table": {
        "table_name": "t0",
        "access_type": "ALL",
        "rows": 2,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "65",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.x, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 2,
      "filtered": 100,
      "attached_condition": "t2.b = `sort-nest`.a"
    }
  }
}
select * from v1,t0 where b<3 order by x,b desc limit 2;
b	c	x
2	0	0
1	0	0
drop table t0,t1,t2;
drop view v1;
# Primary key considered as the key that could achieve ordering
create table t1 (id char(32) NOT NULL primary key);
insert into t1 values (0), (1), (2), (3), (4), (5), (6), (7), (8), (9);
create table t2 (id char(32) NOT NULL primary key);
insert into t2 values (0), (1), (2), (3);
explain select t1.id from t1 INNER JOIN t2 on t1.id=t2.id order by t2.id limit 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	index	PRIMARY	PRIMARY	32	NULL	2	Using index
1	SIMPLE	t1	eq_ref	PRIMARY	PRIMARY	32	test.t2.id	1	Using index
explain format=json select t1.id from t1 INNER JOIN t2 on t1.id=t2.id order by t2.id limit 2;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "index",
      "possible_keys": ["PRIMARY"],
      "key": "PRIMARY",
      "key_length": "32",
      "used_key_parts": ["id"],
      "rows": 2,
      "filtered": 100,
      "using_index": true
    },
    "table": {
      "table_name": "t1",
      "access_type": "eq_ref",
      "possible_keys": ["PRIMARY"],
      "key": "PRIMARY",
      "key_length": "32",
      "used_key_parts": ["id"],
      "ref": ["test.t2.id"],
      "rows": 1,
      "filtered": 100,
      "using_index": true
    }
  }
}
select t1.id from t1 INNER JOIN t2 on t1.id=t2.id order by t2.id limit 2;
id
0
1
drop table t1,t2;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int);
insert into t1 select a,a from t0;
create table t2 as select * from t1;
create table t3 as select (A.a + 10*B.a+C.a*100) as a,
(A.a + 10*B.a+C.a*100) as b
from t0 A, t0 B,t0 C;
#
# Outer Join
#
# sort-nest(t2,t1) and t3 outside the nest
explain select * from t2,t1 left join t3 on t3.a=t1.b
order by t2.a desc,t1.a desc limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	10	
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	10	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select * from t2,t1 left join t3 on t3.a=t1.b
order by t2.a desc,t1.a desc limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "const_condition": "1",
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t1",
        "access_type": "ALL",
        "rows": 10,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "trigcond(t3.a = `sort-nest`.b)"
    }
  }
}
select * from t2,t1 left join t3 on t3.a=t1.b
order by t2.a desc,t1.a desc limit 5;
a	b	a	b	a	b
9	9	9	9	9	9
9	9	8	8	8	8
9	9	7	7	7	7
9	9	6	6	6	6
9	9	5	5	5	5
# no sort-nest as all the inner tables of the outer join will be inside the nest
# this should use temporary table to sort after the entire join is computed
explain select * from t2 left join (t1 left join t3 on t3.a=t1.b) on t2.b=t1.a
order by t2.a desc,t1.a desc limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	10	Using temporary; Using filesort
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	10	Using where; Using join buffer (flat, BNL join)
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where; Using join buffer (incremental, BNL join)
explain format=json select * from t2 left join (t1 left join t3 on t3.a=t1.b) on t2.b=t1.a
order by t2.a desc,t1.a desc limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "const_condition": "1",
    "filesort": {
      "sort_key": "t2.a desc, t1.a desc",
      "temporary_table": {
        "table": {
          "table_name": "t2",
          "access_type": "ALL",
          "rows": 10,
          "filtered": 100
        },
        "block-nl-join": {
          "table": {
            "table_name": "t1",
            "access_type": "ALL",
            "rows": 10,
            "filtered": 100
          },
          "buffer_type": "flat",
          "buffer_size": "141",
          "join_type": "BNL",
          "attached_condition": "trigcond(t1.a = t2.b)"
        },
        "block-nl-join": {
          "table": {
            "table_name": "t3",
            "access_type": "ALL",
            "rows": 1000,
            "filtered": 100
          },
          "buffer_type": "incremental",
          "buffer_size": "1Kb",
          "join_type": "BNL",
          "attached_condition": "trigcond(t3.a = t1.b)"
        }
      }
    }
  }
}
select * from t2 left join (t1 left join t3 on t3.a=t1.b) on t2.b=t1.a
order by t2.a desc,t1.a desc limit 5;
a	b	a	b	a	b
9	9	9	9	9	9
8	8	8	8	8	8
7	7	7	7	7	7
6	6	6	6	6	6
5	5	5	5	5	5
drop table t0,t1,t2,t3;
#
# Sort-nest with prepared statements
#
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int);
insert into t1 select a,a from t0;
create table t2 as select * from t1;
create table t3 (a int, b int);
insert into t3 select (A.a + 10*B.a+C.a*100) as a,
(A.a + 10*B.a+C.a*100) as b
from t0 A, t0 B,t0 C;
# sort-nest on table t1,t2
prepare ps1 from "explain select * from t2,t1,t3 where t3.a=t1.b+1 order by t2.a desc,t1.a desc limit 5";
execute ps1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	10	
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	10	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
execute ps1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	ALL	NULL	NULL	NULL	NULL	10	
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	10	Using join buffer (flat, BNL join)
1	SIMPLE	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	SIMPLE	t3	ALL	NULL	NULL	NULL	NULL	1000	Using where
# sort-nest on table t1,t2
prepare ps2 from "explain format=json  
                    select * from t2,t1,t3 where t3.a=t1.b+1 order by t2.a desc,t1.a desc limit 5";
execute ps2;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t1",
        "access_type": "ALL",
        "rows": 10,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a = `sort-nest`.b + 1"
    }
  }
}
execute ps2;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t2",
      "access_type": "ALL",
      "rows": 10,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t1",
        "access_type": "ALL",
        "rows": 10,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.a desc, `sort-nest`.a desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100,
      "attached_condition": "t3.a = `sort-nest`.b + 1"
    }
  }
}
# sort-nest on table t1,t2
prepare ps3 from "select * from t2,t1,t3 where t3.a=t1.b+1 order by t2.a desc,t1.a desc limit 5";
execute ps3;
a	b	a	b	a	b
9	9	9	9	10	10
9	9	8	8	9	9
9	9	7	7	8	8
9	9	6	6	7	7
9	9	5	5	6	6
execute ps3;
a	b	a	b	a	b
9	9	9	9	10	10
9	9	8	8	9	9
9	9	7	7	8	8
9	9	6	6	7	7
9	9	5	5	6	6
deallocate prepare ps1;
deallocate prepare ps2;
deallocate prepare ps3;
drop table t0,t1,t2,t3;
# INDEPENDENT SUBQUERIES
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (a int, b int);
insert into t1 select a,a from t0 where a <5;
create table t2 as select * from t1 where a < 5;
create table t3 as select (A.a + 10*B.a+C.a*100) as a, (A.a + 10*B.a+C.a*100) as b,
(A.a + 10*B.a+C.a*100) as c from t0 A, t0 B,t0 C;
#
# sort-nest(t2,t1) and independent subquery in the select list
#
explain select (select t4.a from t3 t4 where t4.a > 5 limit 1) as x, t2.b, t1.b, t3.a from t1,t2,t3
where t1.a = t2.a order by t2.b desc, t1.b desc limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	ALL	NULL	NULL	NULL	NULL	5	
1	PRIMARY	t2	ALL	NULL	NULL	NULL	NULL	5	Using where; Using join buffer (flat, BNL join)
1	PRIMARY	<sort-nest>	ALL	NULL	NULL	NULL	NULL	1	Using filesort
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	1000	
2	SUBQUERY	t4	ALL	NULL	NULL	NULL	NULL	1000	Using where
explain format=json select (select t4.a from t3 t4 where t4.a > 5 limit 1) as x, t2.b, t1.b, t3.a from t1,t2,t3
where t1.a = t2.a order by t2.b desc, t1.b desc limit 5;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "table": {
      "table_name": "t1",
      "access_type": "ALL",
      "rows": 5,
      "filtered": 100
    },
    "block-nl-join": {
      "table": {
        "table_name": "t2",
        "access_type": "ALL",
        "rows": 5,
        "filtered": 100
      },
      "buffer_type": "flat",
      "buffer_size": "119",
      "join_type": "BNL",
      "attached_condition": "t2.a = t1.a"
    },
    "read_sorted_file": {
      "filesort": {
        "sort_key": "`sort-nest`.b desc, `sort-nest`.b desc",
        "table": {
          "table_name": "<sort-nest>",
          "access_type": "ALL",
          "rows": 1,
          "filtered": 100
        }
      }
    },
    "table": {
      "table_name": "t3",
      "access_type": "ALL",
      "rows": 1000,
      "filtered": 100
    },
    "subqueries": [
      {
        "query_block": {
          "select_id": 2,
          "table": {
            "table_name": "t4",
            "access_type": "ALL",
            "rows": 1000,
            "filtered": 100,
            "attached_condition": "t4.a > 5"
          }
        }
      }
    ]
  }
}
select (select t4.a from t3 t4 where t4.a > 5 limit 1) as x, t2.b, t1.b, t3.a from t1,t2,t3
where t1.a = t2.a order by t2.b desc, t1.b desc limit 5;
x	b	b	a
6	4	4	0
6	4	4	1
6	4	4	2
6	4	4	3
6	4	4	4
drop table t0,t1,t2,t3;
#
#  Const table should not form the sort-nest
#
CREATE TABLE t1 (i1 integer NOT NULL PRIMARY KEY);
CREATE TABLE t2 (i2 integer NOT NULL PRIMARY KEY);
CREATE TABLE t3 (i3 integer);
INSERT INTO t1 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12);
INSERT INTO t2 SELECT * FROM t1;
SELECT t1.*, t2.* FROM t1 JOIN t2 ON t1.i1 = t2.i2
LEFT JOIN t3 ON t2.i2 = t3.i3
ORDER BY t1.i1 LIMIT 5;
i1	i2
1	1
2	2
3	3
4	4
5	5
drop table t1,t2,t3;
# All tables are const tables
create table t1 (a int, b int);
insert into t1 values (0,0);
create table t2(a int, b int);
insert into t2 values (0,0);
create table t3(a int, b int);
insert into t3 values (0,0);
EXPLAIN extended SELECT t1.a,t2.a,t3.a FROM t1,t2,t3
WHERE t1.b = t2.b and t3.b=t1.b
ORDER BY t2.a desc,t1.a desc limit 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	system	NULL	NULL	NULL	NULL	1	100.00	
1	SIMPLE	t2	system	NULL	NULL	NULL	NULL	1	100.00	
1	SIMPLE	t3	system	NULL	NULL	NULL	NULL	1	100.00	
Warnings:
Note	1003	select 0 AS `a`,0 AS `a`,0 AS `a` from dual where 1 order by 0 desc,0 desc limit 5
SELECT t1.a,t2.a,t3.a FROM t1,t2,t3
WHERE t1.b = t2.b and t3.b=t1.b
ORDER BY t2.a desc,t1.a desc limit 5;
a	a	a
0	0	0
drop table t1,t2,t3;
#
# Tests where Index(scan, ref or range access) satisfies the ORDERING
#
CREATE TABLE t1 (a int, b int, c int, KEY a_b (a,b), KEY a_c (a,c));
insert into t1 values (0,1,0), (0,2,0), (0,3,0), (0,4,0), (0,5,0), (0,6,0);
insert into t1 values (1,7,1), (1,8,1), (1,9,1), (1,10,1), (1,11,1), (1,12,1);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,7,2), (1,8,2), (1,9,2), (1,10,2), (1,11,2), (1,12,2);
insert into t1 values (1,1,2);
# index key a_b, no need for filesort
explain select a,b,c from t1 where a=1 and c=2 order by b limit 10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	a_b,a_c	a_b	5	NULL	19	Using index condition; Using where
select a,b,c from t1 where a=1 and c=2 order by b limit 10;
a	b	c
1	1	2
1	7	2
1	7	2
1	8	2
1	8	2
1	9	2
1	9	2
1	10	2
1	10	2
1	11	2
drop table t1;
